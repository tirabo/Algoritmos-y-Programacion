# -*- coding: utf-8 -*-
"""MELANI MICAELA MACIAS - Tarea10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jfTylQAvXC4PCA9nEEZLCv56m3NkH231

### **TAREA 10**

El propósito de esta tarea es ejercitar listas de listas, dicionarios de listas, etc. También el manejo de archivos y algunos rudimentos del análisis de tdatos.  

**IMPORTANTE**
- La tarea debe entregarse en este archivo, completando las celdas de código correspondientes.
- El código que incorpores *debe* poder ejecutarse en *este* Colab, en caso contrario el ejercicio ***será inválido***. Por favor,  verificá que el código se ejecute sin errores (aún en el caso en que la solución no sea del todo correcta).
- Al clicar "Ejecutar celda" (el triangulito blanco) en las celdas donde están los test deberían devolverse los resultados correctos.
- En estos ejercicios **no está permitido** importar ninguna biblioteca.

**IMPORTANTE 2**
- Escribí las pre y post condiciones.
- Incluí `assert` para comprobar el buen tipado del argumento y el cumplimiento de la precondición.
- No olvides organizar tu programa incluyendo comentarios, espacios y sangrías de manera adecuada. 
- Seguí las convenciones respecto de nombres de variables, funciones y constantes.
- Evitar la utilización de funciones sofisticadas de Python.

##Introducción
Trabajaremos con datos bajados de la web https://www.tutiempo.net . Las primeras celdas de código introducen el código necesario para poder obtener los datos que deseamos en forma estructurada (lista de listas o diccionario de diccionarios). 

Los datos que nos interesan es la información del clima horaria de un cierto lugar en un cierto día.
"""

# pip install beautifulsoup4
# pip install lxml
# Ya están instalados en Colab. En un entorno propio deben instalarse
import requests
from bs4 import BeautifulSoup

"""- Con `requests` podemos bajar una página web.
- Con `BeautifulSoup` extraemos información estructurada de la página.
"""

# Basado en: 1) https://stackoverflow.com/questions/17196018/extracting-table-contents-from-html-with-python-and-beautifulsoup
# 2) https://www.kite.com/python/examples/4420/beautifulsoup-parse-an-html-table-and-write-to-a-csv

# La información la extraemos de la estación metereológica SACO, correspondiente al Aeropuerto de Córdoba. 

def registro_fila_tabla(fila_tabla) -> list: # procesa una fila de la tabla, devuelve la lista con las mediciones registradas en esa fila
    celdas_fila = fila_tabla.findAll('td')
    registro = []
    for celda in celdas_fila:                # recorre las celdas de la fila correspondiente a una toma de mediciones
        registro.append(celda.text)
    return registro

def registros_tabla(tabla) -> list: # procesa una tabla, devuelve la lista de registros contenidos en esa tabla
    registros = []
    for fila_tabla in tabla.findAll('tr'):
        registro = registro_fila_tabla(fila_tabla)
        if len(registro) != 0:
            registros.append(registro)
    return registros

def registros_dia(dia, mes, año) -> list:
    nombre_fecha = str(dia) + '-' + mes + '-' + str(año)
    contenido_url = requests.get('https://www.tutiempo.net/registros/saco/' + nombre_fecha + '.html')
    contenido_estructurado = BeautifulSoup(contenido_url.text, 'lxml') # parsea la página 
    tabla_dia = contenido_estructurado.find('table', {'style': 'width: 100%'}) # extrae la tabla (es la única con style="width: 100%")
    
    return registros_tabla(tabla_dia)


# Ejemplo 
fecha_proc = registros_dia(29, 'mayo', 2021) 

for w in fecha_proc:
    print(w)

"""También podemos hacer, de forma análoga, un diccionario de diccionarios, como hacemos en la siguiente celda de código. """

CLAVES = ['hora', 'desc', 'temp', 'vel', 'hum', 'pres'] 

def registro_fila_tabla(fila_tabla) -> dict: # procesa una fila de la tabla, devuelve un diccionario con las mediciones registradas en esa fila
    celdas_fila = fila_tabla.findAll('td')
    registro = {}
    i = 0
    for celda in celdas_fila:                # recorre las celdas de la fila correspondiente a una toma de mediciones
        registro[CLAVES[i]] = celda.text
        i = i + 1
    return registro

def registros_tabla(tabla) -> dict:          # procesa una tabla, devuelve un diccionario de registros contenidos en esa tabla
    registros = {}
    for fila_tabla in tabla.findAll('tr'):
        registro = registro_fila_tabla(fila_tabla)
        if len(registro) != 0:
            hora = registro.pop('hora')
            hh = int(hora[:2])
            registros[hh] = registro
    return registros

# Devuelve un diccionario de diccionarios
def registros_dia(dia, mes, año) -> dict:
    nombre_fecha = str(dia) + '-' + mes + '-' + str(año)
    contenido_url = requests.get('https://www.tutiempo.net/registros/saco/' + nombre_fecha + '.html')
    contenido_estructurado = BeautifulSoup(contenido_url.text, 'lxml') # parsea la página 
    tabla_dia = contenido_estructurado.find('table', {'style': 'width: 100%'}) # extrae la tabla (es la única con style="width: 100%")
    
    return registros_tabla(tabla_dia)

# Ejemplo
fecha_dic = registros_dia('25','noviembre', 2018)
print(fecha_dic)
print(fecha_dic[3]['temp'])
print(fecha_dic[3]['desc'])

"""El código anterior recupera todos los valores de la tabla elegida. Sin embargo, hay un dato, la dirección del viento, que no es un valor de una celda de la tabla sino un atributo de una celda. Por lo tanto, debemos modificar un poco el código para obtener lo que deseamos."""

CLAVES = ['hora', 'desc', 'temp', 'dir', 'vel', 'hum', 'pres'] 

def registro_fila_tabla(fila_tabla) -> dict: # procesa una fila de la tabla, devuelve un diccionario con las mediciones registradas en esa fila
    celdas_fila = fila_tabla.findAll('td')
    registro = {}
    i = 0
    for celda in celdas_fila:                # recorre las celdas de la fila correspondiente a una toma de mediciones
        if celda.img != None: # si existe el tag 'img'
            input_tag = celda.img['title'] # recupera en el tag 'img' el valor del atributo 'title'
            registro[CLAVES[i]] = input_tag # dirección del viento
            i = i + 1
        registro[CLAVES[i]] = celda.text
        i = i + 1
    return registro

def registros_tabla(tabla) -> dict:          # procesa una tabla, devuelve un diccionario de registros contenidos en esa tabla
    registros = {}
    for fila_tabla in tabla.findAll('tr'):
        registro = registro_fila_tabla(fila_tabla)
        if len(registro) != 0:
            hora = registro.pop('hora')
            hh = int(hora[:2])
            registros[hh] = registro
    return registros

# Devuelve un diccionario de diccionarios
def registros_dia(dia, mes, año) -> dict:
    nombre_fecha = str(dia) + '-' + mes + '-' + str(año)
    contenido_url = requests.get('https://www.tutiempo.net/registros/saco/' + nombre_fecha + '.html')
    contenido_estructurado = BeautifulSoup(contenido_url.text, 'lxml') # parsea la página 
    tabla_dia = contenido_estructurado.find('table', {'style': 'width: 100%'}) # extrae la tabla (es la única con style="width: 100%")
    
    return registros_tabla(tabla_dia)

# Ejemplo
fecha_dic = registros_dia('25','noviembre', 2018)
print(fecha_dic)
print(fecha_dic[3]['temp'])
print(fecha_dic[3]['desc'])

"""*Ejercicio 1.*  Escribir una nueva versión de `registros_dia()` que tenga como argumentos la fecha en  formato `AAAAMMDD` y devuelva el diccionario sin las unidades. Por ejemplo, si 
```
dic_clima = registros_dia('20180523')
```
entonces (por ejemplo), 
```
dic_clima[8] = {'desc': 'Despejado', 'temp': 19, 'dir': 'Nordeste', 'vel': 15, 'hum': 68, 'pres': 1016}
```
y 

```
dic_clima[8]['pres'] = 1016
``` 
Observar  que debemos eliminar las unidades y convertir (donde se pueda) la cadena a `int`. 


La forma más sencilla de hacer esto es con funciones auxiliares. En el código escrito más abajo se proponen 2 funciones auxiliares
1. `formatear_fecha(fecha: str) -> str` que cambia un formato de fecha `AAAAMMDD` a un formato que entienda 'Tu tiempo'. Por ejemplo `formatear_fecha('20160611)` devuelve `'11-junio-2016'`. 
2. `eliminar_unidades(tiempo_hora: dict) -> dict` que elimina las unidades que vienen en 'Tu tiempo'. Por ejemplo,  cambia 
        {'desc': 'Despejado', 'temp': '13°', 'dir': 'Noroeste', 'vel': '7 km/h', 'hum': '88%', 'pres': '1015 hPa'}
a 
        {'desc': 'Despejado', 'temp': 13, 'dir': 'Noroeste', 'vel': 7, 'hum': 88, 'pres': 1015}
Esta es una función delicada porque la regla general que uno pensaría utilizar para cada tipo de dato no se aplica siempre  y eso ocurre porque a veces vienen datos no esperados. Por  ejemplo, puede ocurrir que el valor de `vel` en 'Tu tiempo' sea `- km/h`. En  esos casos,  es conveniente usar un valor testigo de que el dato no está bien, por ejemplo el `None` de Python.     




"""

def registros_dia(fecha: str) -> dict:
  fecha_nueva=formatear_fecha(fecha)    
  contenido_url = requests.get('https://www.tutiempo.net/registros/saco/' + fecha_nueva + '.html')
  contenido_estructurado = BeautifulSoup(contenido_url.text, 'lxml') # parsea la página 
  tabla_dia = contenido_estructurado.find('table', {'style': 'width: 100%'}) # extrae la tabla (es la única con style="width: 100%")
  
  return registros_tabla(tabla_dia)



def formatear_fecha(fecha: str) -> str:

  # pre:  fecha es una fecha en el formato 'AAAAMMDD'
  # post: devuelve la fecha  en el foma dia-nombre del mes-año
  a=fecha[0]+fecha[1]+fecha[2]+fecha[3]
  m=int(fecha[4]+fecha[5])
  d=fecha[6]+fecha[7]
  MES = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]


  return (d + "-" + MES[m-1] + "-" + a)

    
    
    
def eliminar_unidades(registro: dict):
  # pre:  recibe un diccionario tipo  {'desc': 'Despejado', 'temp': '13°', 'dir': 'Noroeste', 'vel': '7 km/h', 'hum': '88%', 'pres': '1015 hPa'}
  # post: modifica el propio diccionario tipo   {'desc': 'Despejado', 'temp': 13, 'dir': 'Noroeste', 'vel': 7, 'hum': 88, 'pres': 1015}

  registro_nuevo= registro.copy()
    
  registro_nuevo["temp"]=registro_nuevo["temp"][:-1]
  registro_nuevo["vel"]=registro_nuevo["vel"][:-4]
  registro_nuevo["hum"]=registro_nuevo["hum"][:-1]
  registro_nuevo["pres"]=registro_nuevo["pres"][:-3]
      
  registro.update(registro_nuevo)

  return registro

#Tests 

formateada = formatear_fecha('20181125')
print(formateada)

dato = {'hora': '05:00', 'desc': 'Despejado', 'temp': '13°', 'dir': 'Noroeste', 'vel': '7 km/h', 'hum': '88%', 'pres': '1015 hPa'}
dato_n = eliminar_unidades(dato)
print(dato_n)

fecha_dic = registros_dia('20181125')
print(fecha_dic)

# Descomentar las 2 lineas siguientes después de implementar
print(fecha_dic[3]['temp'])
print(fecha_dic[3]['desc'])

"""*Ejercicio 2.* Hacer una función 
```
clima_anho(anho: str, mes_ini: int, mes_fin: int)
```
que recibe una string `'AAAA'` y  dos enteros entre 1 y 12 tal que `mes_ini <= mes_fin` y guarda en el archivo 'AAAA.txt', en cada renglón, los datos del clima de cada día en Córdoba desde `mes_ini` hasta el `mes_fin`. Cada renglón es un diccionario (guardado  como texto) con clave  `AAAAMMDD` y con valor el día obtenido por la función `registros_dia(estacion, 'AAAAMMDD')`. 
"""

def clima_anho(anho: str, mes_ini: int, mes_fin: int):
  pass # insertar código

# Tests

clima_anho('2018',1,1) # Ver si se generó el archivo correctamente del primer mes del año 2018

"""**Ejercicio 3.** En este ejercicio vamos a analizar datos del clima que podemos obtener con las funciones implementadas en los ejercicio 1 y 2.

Primero elegí una ciudad o estación meteorológica que no sea de Argentina, arbitraria, pero que tenga suficientes datos para analizar.  Podés saber la sigla de la estación yendo al pronóstico de la ciudad y clickeando 'Ver  registros'. 

1. Obtener las temperaturas máximas y mínimas de cada mes del año 2018 de la ciudad elegida.
2. Calcular el promedio de temperaturas máximas diarias durante la primavera del año 2018 en la ciudad elegida. 
3. Calcular la dirección del viento predominante durante la primavera del año 2018 en la ciudad elegida.    

Para podes hacer esto debés abrir el archivo `2018.txt` y  a partir de los datos de cada renglón (que son cadenas de caracteres) hacer un diccionario o una lista. Para ello puede ayudar la biblioteca `json` y  el método `json.loads()`, pero hay formas alternativas de hacerlo.

Para conseguir los datos de una ciudad que no sea Córdoba se debe modificar la función desarrollada en el ejercicio 1 `registros_dia()` y la desarrollada en el ejercicio 2, `clima_anho()`:
"""

# redefinir 
def registros_dia(estacion: str, fecha: str) -> dict:
  pass

def clima_anho(estacion: str, anho: str, mes_ini: int, mes_fin: int):
  pass

"""A partir de las funciones definidas previamente y de estas dos funciones,  se deberán definir tres funciones que devuelven los resultados deseados  en el formato que les resulte más conveniente."""

def temp_min_max(estacion, anho):
  pass

def temp_max(estacion, mes_ini, mes_fin):
  pass

def dir_viento(estacion, mes_ini, mes_fin):
  pass

"""Finalemente, deberán ejecutar las funciones y mostrar los resultados obtenidos."""

# Resultados